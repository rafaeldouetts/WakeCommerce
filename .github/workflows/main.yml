name: Build and test ASP.Net Core - WakeCoomerce

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:

  build-back-end:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '9.x'
          include-prerelease: true

      - name: Build with dotnet
        run: dotnet build --configuration Release
        working-directory: WakeCommerce
        
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp
          
  unit-tests-back-end:
    runs-on: ubuntu-latest
    needs: build-back-end
    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '9.x'
          include-prerelease: true

      - name: Restore dependencies
        run: dotnet restore
        working-directory: WakeCommerce/WakeCommerce.Tests

      - name: Run Unit tests
        run: |
          dotnet tool install --global coverlet.console
          dotnet tool install --global dotnet-reportgenerator-globaltool
          dotnet test --verbosity minimal --collect:"XPlat Code Coverage"
        working-directory: WakeCommerce/WakeCommerce.Tests

          
      - name: Generate Unit test report
        if: always()
        run: |
          reportgenerator "-reports:**/**/coverage.cobertura.xml" "-targetdir:coveragereport" -reporttypes:Html
          cd WakeCommerce/WakeCommerce.Tests
      - name: Upload Unit test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: coveragereport/

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests-back-end
    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '9.x'
          include-prerelease: true

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://get.docker.com -o get-docker.sh
          sudo sh get-docker.sh
          sudo usermod -aG docker $USER
      
      - name: Run Integration tests
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool
          dotnet test WakeCommerce/WakeCommerce.Integration.Tests/WakeCommerce.Integration.Tests.csproj --verbosity minimal --collect:"XPlat Code Coverage"
          reportgenerator "-reports:**/**/coverage.cobertura.xml" "-targetdir:coveragereport" -reporttypes:Html
          cd WakeCommerce/WakeCommerce.Integration.Tests
        
      - name: Upload Integration tests results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-tests-results
          path: coveragereport/

  BDD-tests-back-end:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '9.x'
          include-prerelease: true
      
      - name: Install Docker Compose
        run: |
          DOCKER_COMPOSE_VERSION=1.29.2
          sudo curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verifica se o Docker Compose foi instalado corretamente
          
      - name: Generate Stryker report
        if: always()
        run: |
          cd WakeCommerce/WakeCommerce.BDD.Tests/
          dotnet test 
      
      - name: Upload dotnet-stryker results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dotnet-bdd-results
          path: ./WakeCommerce/ExtentReport.html

  trivy-scan-back-end:
    runs-on: ubuntu-latest
    needs:  build-back-end
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.40.0/trivy_0.40.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.40.0_Linux-64bit.deb
          wget https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl
          sudo cp html.tpl /usr/bin/html.tpl
      - name: Run Trivy scan on Docker back-end image
        run: |
          cd WakeCommerce
          docker build -t wakecommerce .
          trivy image --format template --template "@/usr/bin/html.tpl" -o trivy-report.html wakecommerce
      - name: Upload Trivy report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report-back-end
          path: trivy-report.html
          
  Stryker-tests-back-end:
    runs-on: ubuntu-latest
    needs: BDD-tests-back-end
    steps:
      - uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '9.x'
          include-prerelease: true

      - name: Generate Stryker report
        if: always()
        run: |
          cd WakeCommerce/WakeCommerce.Integration.Tests/
          dotnet tool install --global dotnet-stryker
          dotnet test 
          dotnet stryker --project WakeCommerce.Application/WakeCommerce.Application.csproj
          dotnet stryker --project WakeCommerce.ApiService/WakeCommerce.ApiService.csproj
      
      - name: Upload dotnet-stryker results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dotnet-stryker-results
          path: ./WakeCommerce/WakeCommerce.Integration.Tests/StrykerOutput

